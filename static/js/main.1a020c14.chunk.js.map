{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","humidity","setHumidity","country","setCountry","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","cityname","setCityname","wind","setWind","savePosition","position","coords","fetchWeather","a","window","navigator","geolocation","getCurrentPosition","axios","get","response","console","log","data","sys","Math","ceil","main","temp","name","speed","description","useEffect","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAwEeA,MAhEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGmBJ,mBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIqBN,mBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,OAKiBR,mBAAS,IAL1B,mBAKNS,EALM,KAKGC,EALH,OAMyBV,mBAAS,GANlC,mBAMNW,EANM,KAMOC,EANP,OAOmBZ,mBAAS,IAP5B,mBAONa,EAPM,KAOIC,EAPJ,OAQWd,mBAAS,IARpB,mBAQNe,EARM,KAQAC,EARA,KAUPC,EAAe,SAACC,GACpBZ,EAAYY,EAASC,OAAOd,UAC5BG,EAAaU,EAASC,OAAOZ,YAG1Ba,EAAY,uCAAG,4BAAAC,EAAA,+EAEVC,OAAOC,UAAUC,YAAYC,mBAAmBR,GAFtC,uBAGOS,IAAMC,IAAN,8DAAiEtB,EAAjE,gBAAiFE,EAAjF,yDAHP,OAGVqB,EAHU,OAIhBC,QAAQC,IAAIF,EAASG,MACrB3B,EAAWwB,EAASG,KAAKC,IAAI7B,SAC7BS,EAAeqB,KAAKC,KAA8B,EAAzBN,EAASG,KAAKI,KAAKC,KAAU,EAAI,KAC1DtB,EAAYc,EAASG,KAAKM,MAC1BrB,EAAQY,EAASG,KAAKhB,KAAKuB,OAC3B5B,EAAWkB,EAASG,KAAKtB,QAAQ,GAAG8B,aACpCrC,EAAY0B,EAASG,KAAKI,KAAKlC,UAVf,kDAYhB4B,QAAQC,IAAR,MAZgB,0DAAH,qDAsBf,OAJFU,qBAAU,WACRpB,MACC,CAACf,EAAUE,IAGV,kCAEE,qBAAKkC,UAAU,MAAf,SACA,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,KAAf,SACE,+CAGF,sBAAKA,UAAU,KAAf,UACE,uBACA,uBACA,4CAAetC,KACf,6CAAgBU,KAChB,gDAAmBF,EAAnB,YACA,4CAAeF,KACf,yCAAYM,EAAZ,UACA,6CAAgBd,EAAhB,mBClDGyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a020c14.chunk.js","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport {Table} from 'react-bootstrap';\n\n\n\n\nfunction App() {\n  const [humidity, setHumidity] = useState('')\n  const [country, setCountry] = useState('')\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState('')\n  const [temperature, setTemperature] = useState(0);\n  const [cityname, setCityname] = useState('')\n  const [wind, setWind] = useState('')\n\n  const savePosition = (position) => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  }\n\n const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePosition)\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=fa9a38080dd2fb9c9a14ccae3b82a1c6&units=metric`);\n      console.log(response.data)\n      setCountry(response.data.sys.country)\n      setTemperature(Math.ceil(response.data.main.temp* 9 / 5 + 32 )) ;\n      setCityname(response.data.name);\n      setWind(response.data.wind.speed);\n      setWeather(response.data.weather[0].description);\n      setHumidity(response.data.main.humidity);\n    } catch (err) {\n      console.log(err);\n    }\n    }\n    \n   \n  \n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]);\n  \n    return (\n      <section>\n        \n        <div className=\"App\">\n        <div className=\"app__container\">\n          <div className=\"h1\">\n            <h1>Weather App</h1>\n          </div>\n          \n          <div className=\"h2\">\n            <br/>\n            <br/>\n            <h3> Country: {country}</h3>\n            <h3> Location: {cityname}</h3>\n            <h3> Temperature: {temperature}â„‰</h3>\n            <h3> Weather: {weather}</h3>\n            <h3> Wind: {wind} mph</h3>\n            <h3> Humidity: {humidity} %</h3>\n          </div>\n        </div>\n       </div>\n      \n      </section>\n     \n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}