{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\renar\\\\weather-api\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [humidity, setHumidity] = useState('');\n  const [country, setCountry] = useState('');\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState('');\n  const [temperature, setTemperature] = useState(0);\n  const [cityname, setCityname] = useState('');\n  const [wind, setWind] = useState('');\n\n  const savePosition = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePosition);\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=fa9a38080dd2fb9c9a14ccae3b82a1c6&units=metric`);\n      console.log(response.data);\n      setCountry(response.data.sys.country);\n      setTemperature(response.data.main.temp);\n      setCityname(response.data.name);\n      setWind(response.data.wind.speed);\n      setWeather(response.data.weather[0].description);\n      setHumidity(response.data.main.humidity);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"eyvENk1CQc+vo20qHjMxp1u1XBM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/renar/weather-api/src/App.js"],"names":["axios","useEffect","useState","Card","Button","App","humidity","setHumidity","country","setCountry","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","cityname","setCityname","wind","setWind","savePosition","position","coords","fetchWeather","window","navigator","geolocation","getCurrentPosition","response","get","console","log","data","sys","main","temp","name","speed","description","err"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,iBAA3B;;;AAKA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMoB,YAAY,GAAIC,QAAD,IAAc;AACjCZ,IAAAA,WAAW,CAACY,QAAQ,CAACC,MAAT,CAAgBd,QAAjB,CAAX;AACAG,IAAAA,YAAY,CAACU,QAAQ,CAACC,MAAT,CAAgBZ,SAAjB,CAAZ;AACD,GAHD;;AAKD,QAAMa,YAAY,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CAAgDP,YAAhD,CAAN;AACA,YAAMQ,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,GAAN,CAAW,uDAAsDrB,QAAS,QAAOE,SAAU,sDAA3F,CAAvB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAzB,MAAAA,UAAU,CAACqB,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAkB3B,OAAnB,CAAV;AACAS,MAAAA,cAAc,CAACa,QAAQ,CAACI,IAAT,CAAcE,IAAd,CAAmBC,IAApB,CAAd;AACAlB,MAAAA,WAAW,CAACW,QAAQ,CAACI,IAAT,CAAcI,IAAf,CAAX;AACAjB,MAAAA,OAAO,CAACS,QAAQ,CAACI,IAAT,CAAcd,IAAd,CAAmBmB,KAApB,CAAP;AACAxB,MAAAA,UAAU,CAACe,QAAQ,CAACI,IAAT,CAAcpB,OAAd,CAAsB,CAAtB,EAAyB0B,WAA1B,CAAV;AACAjC,MAAAA,WAAW,CAACuB,QAAQ,CAACI,IAAT,CAAcE,IAAd,CAAmB9B,QAApB,CAAX;AACD,KAVD,CAUE,OAAOmC,GAAP,EAAY;AACZT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACD;AACA,GAdJ;;AAiBCxC,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACf,QAAD,EAAWE,SAAX,CAFM,CAAT;AAIE,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAOH;;GA3CQP,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport {Card, Button} from 'react-bootstrap';\n\n\n\n\nfunction App() {\n  const [humidity, setHumidity] = useState('')\n  const [country, setCountry] = useState('')\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState('')\n  const [temperature, setTemperature] = useState(0);\n  const [cityname, setCityname] = useState('')\n  const [wind, setWind] = useState('')\n\n  const savePosition = (position) => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  }\n\n const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePosition)\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=fa9a38080dd2fb9c9a14ccae3b82a1c6&units=metric`);\n      console.log(response.data)\n      setCountry(response.data.sys.country)\n      setTemperature(response.data.main.temp);\n      setCityname(response.data.name);\n      setWind(response.data.wind.speed);\n      setWeather(response.data.weather[0].description);\n      setHumidity(response.data.main.humidity);\n    } catch (err) {\n      console.log(err);\n    }\n    }\n  \n  \n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]);\n  \n    return (\n      <section>\n    \n      \n      </section>\n     \n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}